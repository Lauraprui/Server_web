#!/bin/bash
exec > >(tee /var/log/user-data.log | logger -t user-data -s 2>/dev/console) 2>&1
set -e # Salir inmediatamente si un comando falla

apt-get update -y
apt-get install -y docker.io
systemctl start docker
systemctl enable docker
usermod -aG docker admin

BASE_DIR="/opt/nginx_setup"
CERT_DIR="$BASE_DIR/certs"
NGINX_CONF_MAIN_FILE="$BASE_DIR/nginx.conf" 
CONF_D_DIR="$BASE_DIR/conf.d"              
HTML_DIR_HOST="$BASE_DIR/html"              
WWW_DIR_HOST="$BASE_DIR/www"                
HOME_DIR_HOST="$BASE_DIR/home"              

mkdir -p "$CERT_DIR" \
         "$CONF_D_DIR" \
         "$HTML_DIR_HOST/en" "$HTML_DIR_HOST/es" "$HTML_DIR_HOST/fr" \
         "$WWW_DIR_HOST/sitio1" "$WWW_DIR_HOST/sitio2" \
         "$HOME_DIR_HOST/test/public_html" "$HOME_DIR_HOST/maria/public_html"

echo "${ssl_cert_pem}" > "$CERT_DIR/server.crt"
echo "${ssl_key_pem}" > "$CERT_DIR/server.key"
chmod 600 "$CERT_DIR/server.key"

cat << 'EOF_NGINX_MAIN' > "$NGINX_CONF_MAIN_FILE"
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 4096;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    include /etc/nginx/conf.d/*.conf;
}
EOF_NGINX_MAIN

cat << 'EOF_NGINX_SITE_CONF' > "$CONF_D_DIR/default.conf"
${nginx_conf_content}
EOF_NGINX_SITE_CONF

echo "<h1>Welcome! (EN)</h1><p><a href='/es/'>Español</a> | <a href='/fr/'>Français</a></p><p><a href='/users/test/'>Test User</a> | <a href='/users/maria/'>Maria User</a></p><p><a href='/sitio1/'>Sitio 1</a> | <a href='/sitio2/'>Sitio 2</a></p><p><a href='/api/test'>API Test</a></p>" > "$HTML_DIR_HOST/en/index.html"
echo "<h1>¡Bienvenido! (ES)</h1><p><a href='/en/'>English</a> | <a href='/fr/'>Français</a></p><p><a href='/users/test/'>Usuario Test</a> | <a href='/users/maria/'>Usuario Maria</a></p><p><a href='/sitio1/'>Sitio 1</a> | <a href='/sitio2/'>Sitio 2</a></p><p><a href='/api/test'>API Test</a></p>" > "$HTML_DIR_HOST/es/index.html"
echo "<h1>Bienvenue! (FR)</h1><p><a href='/en/'>English</a> | <a href='/es/'>Español</a></p><p><a href='/users/test/'>Utilisateur Test</a> | <a href='/users/maria/'>Utilisateur Maria</a></p><p><a href='/sitio1/'>Sitio 1</a> | <a href='/sitio2/'>Sitio 2</a></p><p><a href='/api/test'>API Test</a></p>" > "$HTML_DIR_HOST/fr/index.html"

echo "<h1>403 Forbidden (EN)</h1>" > "$HTML_DIR_HOST/en/403.html"
echo "<h1>403 Prohibido (ES)</h1>" > "$HTML_DIR_HOST/es/403.html"
echo "<h1>403 Interdit (FR)</h1>" > "$HTML_DIR_HOST/fr/403.html"
echo "<h1>404 Not Found (EN)</h1>" > "$HTML_DIR_HOST/en/404.html"
echo "<h1>404 No Encontrado (ES)</h1>" > "$HTML_DIR_HOST/es/404.html"
echo "<h1>404 Non Trouvé (FR)</h1>" > "$HTML_DIR_HOST/fr/404.html"
echo "<h1>50x Server Error (EN)</h1>" > "$HTML_DIR_HOST/en/50x.html"
echo "<h1>50x Error del Servidor (ES)</h1>" > "$HTML_DIR_HOST/es/50x.html"
echo "<h1>50x Erreur Serveur (FR)</h1>" > "$HTML_DIR_HOST/fr/50x.html"

echo "<h1>Contenido de Sitio 1 (Host)</h1>" > "$WWW_DIR_HOST/sitio1/index.html"
echo "<h1>Contenido de Sitio 2 (Host)</h1>" > "$WWW_DIR_HOST/sitio2/index.html"

echo "<h1>Página de Test (Usuario: test)</h1><p>Contenido público de test.</p>" > "$HOME_DIR_HOST/test/public_html/index.html"
echo "<h1>Página de María (Usuario: maria)</h1><p>Contenido público de María.</p>" > "$HOME_DIR_HOST/maria/public_html/index.html"
echo "<p>Otro archivo para test</p>" > "$HOME_DIR_HOST/test/public_html/otro.html"


chmod -R a+rX "$BASE_DIR"


DOCKERFILE_PATH="$BASE_DIR/Dockerfile"
cat << 'EOF_DOCKERFILE' > "$DOCKERFILE_PATH"
FROM debian:12

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update -y && \
    apt-get install -y nginx apache2-utils --no-install-recommends && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN groupadd -r nginx && useradd -r -g nginx -s /usr/sbin/nologin -d /var/lib/nginx nginx

RUN useradd -M -N -r -s /usr/sbin/nologin test && echo "test:test" | chpasswd && \
    useradd -M -N -r -s /usr/sbin/nologin maria && echo "maria:1234" | chpasswd

RUN htpasswd -cb /etc/nginx/.htpasswd test "test"
RUN htpasswd -b /etc/nginx/.htpasswd maria "1234"
RUN chmod 644 /etc/nginx/.htpasswd

RUN mkdir -p /etc/nginx/certs \
             /etc/nginx/conf.d \
             /etc/nginx/html \
             /var/www/sitio1 \
             /var/www/sitio2 \
             /home/test/public_html \
             /home/maria/public_html \
             /var/log/nginx \
             /var/lib/nginx/tmp \
             /var/cache/nginx

RUN chown -R www-data:www-data /var/log/nginx /var/lib/nginx /var/cache/nginx && \
    chown www-data:www-data /etc/nginx/.htpasswd

EXPOSE 80 443

ENTRYPOINT ["/usr/sbin/nginx"]
CMD ["-g", "daemon off;"]
EOF_DOCKERFILE

DOCKER_IMAGE_NAME="custom-nginx-server:latest"
docker build -t "$DOCKER_IMAGE_NAME" "$BASE_DIR" # El contexto es BASE_DIR

CONTAINER_NAME="nginx_server_instance"
docker stop "$CONTAINER_NAME" || true
docker rm "$CONTAINER_NAME" || true

docker run -d --name "$CONTAINER_NAME" \
  --restart always \
  -p 80:80 \
  -p 443:443 \
  -v "$CERT_DIR:/etc/nginx/certs:ro" \
  -v "$NGINX_CONF_MAIN_FILE:/etc/nginx/nginx.conf:ro" \
  -v "$CONF_D_DIR:/etc/nginx/conf.d:ro" \
  -v "$HTML_DIR_HOST:/etc/nginx/html:ro" \
  -v "$WWW_DIR_HOST/sitio1:/var/www/sitio1:ro" \
  -v "$WWW_DIR_HOST/sitio2:/var/www/sitio2:ro" \
  -v "$HOME_DIR_HOST:/home:ro" \
  "$DOCKER_IMAGE_NAME"